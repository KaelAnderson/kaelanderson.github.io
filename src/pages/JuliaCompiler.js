import React, {useEffect, useState} from "react";
import Particles, {initParticlesEngine} from "@tsparticles/react";
import {loadFull} from "tsparticles";
import "../App.css";
import particlesOptions from "../particles.json";
import 'bootstrap/dist/css/bootstrap.min.css';
import { NavBar } from "../components/NavBar";
import { Footer } from "../components/Footer";
import { Col, Row, Container } from "react-bootstrap";
import JuliaLogo from '../assets/img/JuliaLogo169.jpg'
import JuliaTokens from '../assets/img/JuliaTokens.png'
import JuliaParseTree from '../assets/img/JuliaParseTree.png'
import JuliaTest from '../assets/img/JuliaTest.png'

    
function JuliaCompiler(){
    const [init, setInit] = useState(false);

    useEffect(() => {
        if (init) {
            return;
        }

        initParticlesEngine(async (engine) => {
            await loadFull(engine);
        }).then(() => {
            setInit(true);
        });
    }, []);

    const particlesLoaded = (container) => {
        console.log(container);
    };
    
    return(
        <div className="JuliaCompiler">
            <Particles
                id="tsparticles"
                particlesLoaded={particlesLoaded}
                options={particlesOptions}
            />
            <NavBar/>
            <Container>
                <Row>
                    <Col>
                        <div className="box">
                            <h2>Julia Compiler</h2>

                            <h3>Julia Compiler in Python: A Journey of Curiosity</h3>
                            <div className="projrows">
                                <div>
                                    <div>Out of curiosity and a desire to challenge myself, I decided to build a Julia compiler using Python. This personal project allowed me to look into the mechanics of compilers, from tokenization to interpretation. The experience not only sharpened my skills in Python but also gave me a better understanding of how languages like Julia function at a low level.</div>
                                </div>
 
                            <img src={JuliaLogo}  alt=""/>
                            </div>
                            <div className="projbelow">
                                <img src={JuliaLogo}  alt=""/>
                            </div>

                            <h3>Lexical Analysis with Python</h3>
                            <div className="projrows">
                                <div>
                                    <div>The first step in building my compiler was to create a lexical analyzer. I designed a single-file solution, lex.py, for ease of readability and maintainability. The purpose of this lexer was to tokenize input code, identifying key components like operators, keywords, and identifiers. Any code that wasn't essential for execution, such as comments, was skipped over. I also deviated slightly from the suggested design, adding token types that I felt were necessary for handling Julia syntax effectively.</div>
                                </div>
 
                            <img src={JuliaTokens}  alt=""/>
                            </div>
                            <div className="projbelow">
                                <img src={JuliaTokens}  alt=""/>
                            </div>

                            <h3>Recursive Descent Parsing</h3>
                            <div className="projrows">
                                <div>
                                    <div>For the parsing phase, I decided on a recursive descent approach due to its intuitive design. This phase involved transforming the tokens generated by the lexer into a parse tree. I created custom node types to handle Julia's grammar rules, ensuring the parse tree represented the structure of the code accurately.</div>
                                </div>
 
                            <img src={JuliaParseTree}  alt=""/>
                            </div>
                            <div className="projbelow">
                                <img src={JuliaParseTree}  alt=""/>
                            </div>

                            <h3>Stack-Based Interpreter</h3>
                            <div className="projrows">
                                <div>
                                    <div>The final stage of the compiler was developing the interpreter. I implemented a stack-based approach, where the Abstract Syntax Tree (AST) was traversed, and commands were added to a stack. The interpreter then executed these commands sequentially. This design allowed for efficient execution of code, handling loops, conditionals, and variable assignments. Throughout this process, I tested each component rigorously, making necessary adjustments along the way.</div>
                                </div>
 
                            <img src={JuliaTest}  alt=""/>
                            </div>
                            <div className="projbelow">
                                <img src={JuliaTest}  alt=""/>
                            </div>

                            <h3>Reflection</h3>
                            <div className="projrows">
                                <div>
                                    <div>This project was a fascinating exploration of compiler theory and language design. It reinforced the importance of careful planning, testing, and iteration. While I encountered challenges, especially with handling specific operators and syntax, the process of debugging and refining the compiler was incredibly rewarding. This experience has not only deepened my understanding of programming languages but also fueled my passion for tackling complex technical problems.</div>
                                </div>
 
                            <img src={JuliaLogo}  alt=""/>
                            </div>
                            <div className="projbelow">
                                <img src={JuliaLogo}  alt=""/>
                            </div>
                        </div>
                    </Col>
                </Row>
            </Container>
            <Footer/>
        </div>
        
    );

}   

export default JuliaCompiler;